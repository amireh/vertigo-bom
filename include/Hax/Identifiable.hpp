/*
 * This file is part of Vertigo: The Brink of Madness.
 *
 * Vertigo: The Brink of Madness - a cross-platform arcade game powered by Ogre3D.
 * Copyright (C) 2011-2012  Ahmad Amireh <ahmad@amireh.net>
 *
 * Vertigo: The Brink of Madness is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Vertigo: The Brink of Madness is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Vertigo: The Brink of Madness.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef H_HAX_IDENTIFIABLE_H
#define H_HAX_IDENTIFIABLE_H

#include "Hax/Hax.hpp"
#include "Hax/Event.hpp"

#include <string>

namespace Hax
{
	/**
   * @class Identifiable
	 * @brief
   * Identifiable objects hold a unique UID field throughout the game to
   * represent its identity and a model identifier (a name) to represent its type.
   *
   * For example, a Spell object could have a UID of 6, and a name "Fireball".
	 */
	class Identifiable {
	public:

		Identifiable();
		Identifiable& operator=(const Identifiable& rhs);
		Identifiable(const Identifiable& src);
		virtual ~Identifiable();

		/*!
     * @brief
     * The UID is a global identifier for _this_ object and you can be assured
     * that no other object has the same UID throughout the game's instance.
     *
     * This UID is generated by the server.
     *
     * @warning
     * Attempting to re-assign the UID after it's been changed from Unassigned
     * will throw an exception of type "integrity_violation".
     */
		void __setUID(int);
		int getUID() const;

		/*!
     * @brief
     * The name is used for determining the sub-type of an object, for example
     * a Spell or a Unit's name. Names are not unique in the sense that many
     * objects could share the same name but with a different UID.
     *
     * The name is assigned to the object when it's created by its respective
     * factory.
     *
     * @warning
     * Attempting to re-assign an object's name after it's been changed from Unnamed
     * will throw an exception of type "integrity_violation".
     */
    void __setName(string_t const&);
    string_t const& getName() const;

    /**
     * @brief
     * Two Identifiables are equal only when their UIDs match.
     **/
    bool operator==(const Identifiable& rhs);

    virtual void serialize(Event& inEvt);
    virtual void deserialize(const Event& inEvt);

	protected:

    int       mUID;
    string_t  mName;

		void copyFrom(const Identifiable& src);
	}; // end of Identifiable class
} // end of Hax namespace
#endif
