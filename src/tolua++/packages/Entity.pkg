$#include "Hax/Entity.hpp"

namespace Hax
{
  class Entity
  {
    public:

    Entity();
    virtual ~Entity();

    void setup(Ogre::SceneManager*);

    virtual bool live();
		virtual void die();

    MovableTextOverlay* getText() const;
    void setText(MovableTextOverlay* inT);
    virtual void updateTextOverlay();

    void hide();
    void show();

    // --- Identifiable ---
		/*!
     * @brief
     * The UID is a global identifier for _this_ object and you can be assured
     * that no other object has the same UID throughout the game's instance.
     *
     * This UID is generated by the server.
     *
     * @warning
     * Attempting to re-assign the UID after it's been changed from Unassigned
     * will throw an exception of type "integrity_violation".
     */
		void __setUID(int);
		int getUID() const;

		/*!
     * @brief
     * The name is used for determining the sub-type of an object, for example
     * a Spell or a Unit's name. Names are not unique in the sense that many
     * objects could share the same name but with a different UID.
     *
     * The name is assigned to the object when it's created by its respective
     * factory.
     *
     * @warning
     * Attempting to re-assign an object's name after it's been changed from Unnamed
     * will throw an exception of type "integrity_violation".
     */
    void __setName(string_t);
    string_t getName() const;

    // --- Animable ---
    void registerAnimationState(Hax::Animable::AnimID inId, string_t inState, bool doLoop = true);

    float animateLive();
    float animateDie();
    float animateIdle();
    float animateWalk();
    float animateRun();
    float animateAttack();
    float animateHit();
    float animateRest();
    float animateGetUp();

    // if override is true, then the given animation will instantly
    // play and override any currently playing one (even mini ones)
    //
    // note: only applies to Mini animations
    float _animate(Hax::Animable::AnimID inId, bool override = false);

    static void setAnimFadeSpeed(float inSpeed);
    static float getAnimFadeSpeed();

    // --- Renderable ---
    void attachSceneNode(Ogre::SceneNode* inNode);
		Ogre::SceneNode* getSceneNode() const;

		void attachSceneObject(Ogre::Entity* inObject);
		Ogre::Entity* getSceneObject() const;

    Ogre::Entity* attachExtension(string_t inMesh, string_t inBone);

    string_t getMesh() const;
    string_t getMaterial() const;
    void setMaterial(string_t);
    void setMesh(string_t);

    // --- Mobile ---
    void move(int inWaypoint);

    bool isMoving() const;

    void setWaypoints(std::vector<Vector3>* inWp);

    void setWalkSpeed(const float inSpeed);
    float getWalkSpeed() const;

    static void setDefaultWalkSpeed(const float inSpeed);
    static float getDefaultWalkSpeed();

    static void setRotationFactor(float inFactor);
  }; // end of class Entity
} // end of Hax namespace
