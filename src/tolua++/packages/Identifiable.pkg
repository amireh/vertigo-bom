$#include "Hax/Identifiable.hpp"

namespace Hax {
	/**
   * @class Identifiable
	 * @brief
   * Identifiable objects hold a unique UID field throughout the game to
   * represent its identity and a model identifier (a name) to represent its type.
   *
   * For example, a Spell object could have a UID of 6, and a name "Fireball".
	 */
	class Identifiable {
	public:

		Identifiable();
		Identifiable& operator=(const Identifiable& rhs);
		Identifiable(const Identifiable& src);
		virtual ~Identifiable();

		/*!
     * @brief
     * The UID is a global identifier for _this_ object and you can be assured
     * that no other object has the same UID throughout the game's instance.
     *
     * This UID is generated by the server.
     *
     * @warning
     * Attempting to re-assign the UID after it's been changed from Unassigned
     * will throw an exception of type "integrity_violation".
     */
		void _setUID(int);
		int getUID() const;

		/*!
     * @brief
     * The name is used for determining the sub-type of an object, for example
     * a Spell or a Unit's name. Names are not unique in the sense that many
     * objects could share the same name but with a different UID.
     *
     * The name is assigned to the object when it's created by its respective
     * factory.
     *
     * @warning
     * Attempting to re-assign an object's name after it's been changed from Unnamed
     * will throw an exception of type "integrity_violation".
     */
    void _setName(string_t const&);
    string_t const& getName() const;

    /**
     * @brief
     * Two Identifiables are equal only when their UIDs match.
     **/
    bool operator==(const Identifiable& rhs);
	}; // end of Identifiable class
}
